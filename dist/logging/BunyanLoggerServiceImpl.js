"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BunyanLoggerServiceImpl = void 0;
const Logger = require("bunyan");
class BunyanLoggerServiceImpl {
    constructor({ name, level }) {
        this.name = name;
        this.level = level;
        this.LOG = Logger.createLogger({
            name: this.name,
            level: this.level,
            serializers: {
                ...Logger.stdSerializers,
            },
        });
    }
    trace(opts) {
        if (opts.error) {
            this.LOG.trace({ err: opts.error, ...opts.data }, opts.message);
        }
        else {
            this.LOG.trace(opts.message);
        }
    }
    debug(opts) {
        if (opts.error) {
            this.LOG.debug({ err: opts.error, ...opts.data }, opts.message);
        }
        else {
            this.LOG.debug(opts.message);
        }
    }
    info(opts) {
        if (opts.error) {
            this.LOG.info({ err: opts.error, ...opts.data }, opts.message);
        }
        else {
            this.LOG.info(opts.message);
        }
    }
    warn(opts) {
        if (opts.error) {
            this.LOG.warn({ err: opts.error, ...opts.data }, opts.message);
        }
        else {
            this.LOG.warn(opts.message);
        }
    }
    error(opts) {
        if (opts.error) {
            this.LOG.error({ err: opts.error, ...opts.data }, opts.message);
        }
        else {
            this.LOG.error(opts.message);
        }
    }
    fatal(opts) {
        if (opts.error) {
            this.LOG.fatal({ err: opts.error, ...opts.data }, opts.message);
        }
        else {
            this.LOG.fatal(opts.message);
        }
    }
}
exports.BunyanLoggerServiceImpl = BunyanLoggerServiceImpl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVueWFuTG9nZ2VyU2VydmljZUltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9nZ2luZy9CdW55YW5Mb2dnZXJTZXJ2aWNlSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxpQ0FBaUM7QUFFakMsTUFBYSx1QkFBdUI7SUFJbEMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQTRDO1FBQ25FLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztZQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsV0FBVyxFQUFFO2dCQUNYLEdBQUcsTUFBTSxDQUFDLGNBQWM7YUFFekI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQW1CO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQW1CO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBQ0QsSUFBSSxDQUFDLElBQW1CO1FBQ3RCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDLElBQW1CO1FBQ3RCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQW1CO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQW1CO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0NBQ0Y7QUE1REQsMERBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nZ2VyU2VydmljZSwgTG9nTWV0aG9kT3B0cyB9IGZyb20gXCIuL0xvZ2dlclNlcnZpY2VcIjtcbmltcG9ydCAqIGFzIExvZ2dlciBmcm9tIFwiYnVueWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBCdW55YW5Mb2dnZXJTZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIExvZ2dlclNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBsZXZlbDogTG9nZ2VyLkxvZ0xldmVsO1xuICBwcml2YXRlIHJlYWRvbmx5IExPRzogTG9nZ2VyO1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGxldmVsIH06IHsgbmFtZTogc3RyaW5nOyBsZXZlbDogTG9nZ2VyLkxvZ0xldmVsIH0pIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB0aGlzLkxPRyA9IExvZ2dlci5jcmVhdGVMb2dnZXIoe1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgbGV2ZWw6IHRoaXMubGV2ZWwsXG4gICAgICBzZXJpYWxpemVyczoge1xuICAgICAgICAuLi5Mb2dnZXIuc3RkU2VyaWFsaXplcnMsXG4gICAgICAgIC8vIGdhdGV3YXlFdmVudDogZ2F0ZXdheUV2ZW50U2VyaWFsaXplcixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICB0cmFjZShvcHRzOiBMb2dNZXRob2RPcHRzKTogdm9pZCB7XG4gICAgaWYgKG9wdHMuZXJyb3IpIHtcbiAgICAgIHRoaXMuTE9HLnRyYWNlKHsgZXJyOiBvcHRzLmVycm9yLCAuLi5vcHRzLmRhdGEgfSwgb3B0cy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5MT0cudHJhY2Uob3B0cy5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbiAgZGVidWcob3B0czogTG9nTWV0aG9kT3B0cyk6IHZvaWQge1xuICAgIGlmIChvcHRzLmVycm9yKSB7XG4gICAgICB0aGlzLkxPRy5kZWJ1Zyh7IGVycjogb3B0cy5lcnJvciwgLi4ub3B0cy5kYXRhIH0sIG9wdHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuTE9HLmRlYnVnKG9wdHMubWVzc2FnZSk7XG4gICAgfVxuICB9XG4gIGluZm8ob3B0czogTG9nTWV0aG9kT3B0cyk6IHZvaWQge1xuICAgIGlmIChvcHRzLmVycm9yKSB7XG4gICAgICB0aGlzLkxPRy5pbmZvKHsgZXJyOiBvcHRzLmVycm9yLCAuLi5vcHRzLmRhdGEgfSwgb3B0cy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5MT0cuaW5mbyhvcHRzLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHdhcm4ob3B0czogTG9nTWV0aG9kT3B0cyk6IHZvaWQge1xuICAgIGlmIChvcHRzLmVycm9yKSB7XG4gICAgICB0aGlzLkxPRy53YXJuKHsgZXJyOiBvcHRzLmVycm9yLCAuLi5vcHRzLmRhdGEgfSwgb3B0cy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5MT0cud2FybihvcHRzLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuICBlcnJvcihvcHRzOiBMb2dNZXRob2RPcHRzKTogdm9pZCB7XG4gICAgaWYgKG9wdHMuZXJyb3IpIHtcbiAgICAgIHRoaXMuTE9HLmVycm9yKHsgZXJyOiBvcHRzLmVycm9yLCAuLi5vcHRzLmRhdGEgfSwgb3B0cy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5MT0cuZXJyb3Iob3B0cy5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbiAgZmF0YWwob3B0czogTG9nTWV0aG9kT3B0cyk6IHZvaWQge1xuICAgIGlmIChvcHRzLmVycm9yKSB7XG4gICAgICB0aGlzLkxPRy5mYXRhbCh7IGVycjogb3B0cy5lcnJvciwgLi4ub3B0cy5kYXRhIH0sIG9wdHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuTE9HLmZhdGFsKG9wdHMubWVzc2FnZSk7XG4gICAgfVxuICB9XG59XG4iXX0=